{"version":3,"sources":["service/VoteDataService.js","component/CreateVote.jsx","component/AddVote.jsx","component/Navigate.jsx","component/ViewResult.jsx","component/Site.jsx","BmdApp.js","serviceWorker.js","index.js"],"names":["HOST","VOTE_CREATE_URL","VOTE_ADD_VOTE_URL","VOTE_GET_URL","VOTE_GET_RESULT_URL","data","axios","post","voteId","console","log","get","CreateVote","props","state","startDate","Date","endDate","currentDate","name","selectedDays","errorMsg","handleChange","bind","handleSubmit","handleChangeName","handleDayClick","value","this","setState","event","target","preventDefault","dates","forEach","date","push","moment","format","VoteDataService","createVote","creator","bestDatesForCreator","then","response","id","catch","error","day","selected","selectedIndex","findIndex","selectedDay","DateUtils","isSameDay","splice","linkTOAddVote","urlToAddVote","utils","DateFnsUtils","Container","Row","href","class","TelegramShareButton","url","title","children","WhatsappShareButton","Form","noValidate","onSubmit","style","display","Group","controlId","Label","column","Col","DatePicker","onChange","minDate","onDayClick","Control","type","placeholder","length","maxLength","Button","variant","color","onClick","Component","AddVote","match","params","author","open_flag","wasSent","isVisible","setOpen","getVote","addVote","bestDates","Navigate","history","ViewResult","bestDay","bestDayWithCreator","bestDayVoters","bestDayWithCreatorVoters","getBestDates","map","voterName","i","Site","path","exact","component","BmdApp","className","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.176ff6a2.chunk.js","sourcesContent":["import axios from 'axios'\n\nexport const HOST = 'http://localhost:8080';\nconst VOTE_CREATE_URL = `${HOST}/vote/start`;\nconst VOTE_ADD_VOTE_URL = `${HOST}/vote/add`;\nconst VOTE_GET_URL = `${HOST}/vote/get`;\nconst VOTE_GET_RESULT_URL = `${HOST}/vote/getBestDates`;\n\nclass VoteDataService {\n\n    createVote(data) {\n        return axios.post(`${VOTE_CREATE_URL}`, data);\n    }\n\n    getVote(voteId) {\n        console.log(\"Get votes by id \"  + voteId);\n        return axios.get(`${VOTE_GET_URL}/${voteId}`);\n    }\n\n    addVote(data, voteId) {\n        return axios.post(`${VOTE_ADD_VOTE_URL}/${voteId}`, data);\n    }\n\n    getBestDates(voteId) {\n        return axios.get(`${VOTE_GET_RESULT_URL}/${voteId}`);\n    }\n\n}\nexport default new VoteDataService()\n","import React, {Component} from 'react';\nimport {Button} from '@material-ui/core';\nimport {DatePicker, MuiPickersUtilsProvider} from \"@material-ui/pickers\";\nimport DayPicker, {DateUtils} from 'react-day-picker';\nimport 'react-day-picker/lib/style.css';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {Col, Container, Form, Row} from 'react-bootstrap';\nimport VoteDataService, {HOST} from '../service/VoteDataService';\nimport moment from 'moment';\nimport {TelegramShareButton, WhatsappShareButton} from 'react-share';\n\n\nclass CreateVote extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            startDate: new Date(),\n            endDate: new Date(),\n            currentDate: new Date(),\n            name: \"\",\n            voteId: \"\",\n            selectedDays: [],\n            errorMsg: \"\"\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChangeName = this.handleChangeName.bind(this);\n        this.handleDayClick = this.handleDayClick.bind(this);\n    }\n\n    handleChange(value, name) {\n        this.setState({\n            [name]: value\n        });\n    }\n\n    handleChangeName(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        let dates = [];\n        this.state.selectedDays.forEach((date) => {\n            dates.push(moment(date).format('DD.MM.YYYY'))\n        });\n\n        VoteDataService.createVote({\n            startDate: moment(this.state.startDate).format('DD.MM.YYYY'),\n            endDate: moment(this.state.endDate).format('DD.MM.YYYY'),\n            creator: this.state.name,\n            bestDatesForCreator: dates\n        }).then(response => {\n            this.setState({\n                startDate: new Date(),\n                endDate: new Date(),\n                currentDate: new Date(),\n                name: \"\",\n                voteId: response.data.id,\n                errorMsg: \"\"})\n        }).catch(error => {\n               this.setState({\n                  errorMsg: error.response.data\n               })\n            }\n        )\n\n    }\n\n    handleDayClick(day, {selected}) {\n        const {selectedDays} = this.state;\n        if (selected) {\n            const selectedIndex = selectedDays.findIndex(selectedDay =>\n                DateUtils.isSameDay(selectedDay, day)\n            );\n            selectedDays.splice(selectedIndex, 1);\n        } else {\n            selectedDays.push(day);\n        }\n        this.setState({selectedDays});\n    }\n\n    render() {\n\n        let linkTOAddVote = `/addvote/${this.state.voteId}`;\n        let urlToAddVote = HOST + linkTOAddVote;\n\n        return (\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <Container>\n                    <Row><a href=\"/\">Назад</a></Row>\n                    <Row>\n                        <h3>Создать опрос выбора лучшей даты</h3>\n                    </Row>\n                    {\n                        this.state.voteId &&\n                        <div class=\"alert alert-success\">Создано голосование {this.state.voteId}.\n                            <a href={linkTOAddVote}>Ссылка на голование </a>\n                            <TelegramShareButton url={urlToAddVote} title=\"Проголосовать за дату\" children=\"\"/>\n                            <WhatsappShareButton url={urlToAddVote} title=\"Проголосовать за дату\" children=\"\"/>\n                        </div>\n                    }\n                    {\n                        this.state.errorMsg &&\n                        <div class=\"alert alert-danger\">{this.state.errorMsg} </div>\n                    }\n                    <Row>\n                        <Form noValidate onSubmit={this.handleSubmit} style={!this.state.voteId ? {} : { display: 'none' }}>\n\n                            <Form.Row>\n\n                                <Form.Group controlId=\"startd\">\n                                    <Form.Label column>Дата начала</Form.Label>\n                                    <Col>\n                                        <DatePicker\n                                            value={this.state.startDate}\n                                            onChange={date => this.handleChange(date, \"startDate\")}\n                                            minDate={this.state.currentDate}\n                                            format=\"dd.MM.yyyy\"\n                                            name=\"startDate\"\n                                        />\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group controlId=\"enddd\">\n                                    <Form.Label column>Дата окончания</Form.Label>\n                                    <Col>\n                                        <DatePicker\n                                            value={this.state.endDate}\n                                            onChange={date => this.handleChange(date, \"endDate\")}\n                                            minDate={this.state.currentDate}\n                                            format=\"dd.MM.yyyy\"\n                                            name=\"endDate\"\n                                        />\n                                    </Col>\n                                </Form.Group>\n                            </Form.Row>\n\n                            <Form.Row>\n                                <Form.Group controlId=\"dates\">\n                                    <Form.Label column>Даты</Form.Label>\n                                    <Col>\n                                        <DayPicker\n                                            selectedDays={this.state.selectedDays}\n                                            onDayClick={this.handleDayClick}\n                                        />\n                                    </Col>\n                                </Form.Group>\n                            </Form.Row>\n\n                            <Form.Row>\n                                <Form.Group controlId=\"name\">\n                                    <Form.Label column>Имя автора</Form.Label>\n                                    <Col>\n                                        <Form.Control type=\"text\" placeholder=\"Имя автора\" length={50} maxLength={200}\n                                                      value={this.state.name} onChange={this.handleChangeName} name=\"name\" />\n                                    </Col>\n                                </Form.Group>\n                            </Form.Row>\n\n                            <Form.Row>\n                                <Form.Group controlId=\"b\">\n                                    <Col>\n                                        <Button name=\"name\" variant=\"contained\" color=\"primary\" onClick={this.handleSubmit}>\n                                            Создать\n                                        </Button>\n                                    </Col>\n                                </Form.Group>\n                            </Form.Row>\n\n                        </Form>\n                    </Row>\n                </Container>\n            </MuiPickersUtilsProvider>\n        );\n    }\n}\n\nexport default CreateVote;","import React, {Component} from 'react';\nimport DayPicker, {DateUtils} from 'react-day-picker';\nimport 'react-day-picker/lib/style.css';\nimport {Col, Container, Form, Row} from 'react-bootstrap';\nimport VoteDataService from '../service/VoteDataService';\nimport {Button} from \"@material-ui/core\";\nimport moment from 'moment';\n\nclass AddVote extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            voteId: this.props.match.params.voteId,\n            startDate: \"\",\n            endDate: \"\",\n            creator: \"\",\n            author: \"\",\n            open_flag: false,\n            selectedDays: [],\n            wasSent: false,\n            isVisible: true,\n            errorMsg: \"\"\n        };\n\n        this.setOpen = this.setOpen.bind(this);\n        this.handleDayClick = this.handleDayClick.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChangeName = this.handleChangeName.bind(this);\n    }\n\n    componentDidMount() {\n        console.log(\"UI Get votes by id \" + this.state.voteId);\n        if (this.state.voteId.length === 0) {\n            return\n        }\n\n        VoteDataService.getVote(this.state.voteId)\n            .then(response => this.setState({\n                startDate: response.data.startDate,\n                endDate: response.data.endDate,\n                creator: response.data.creator\n            }))\n    }\n\n    setOpen() {\n        this.state.open_flag = !this.state.open_flag;\n    }\n\n    handleDayClick(day, {selected}) {\n        const {selectedDays} = this.state;\n        if (selected) {\n            const selectedIndex = selectedDays.findIndex(selectedDay =>\n                DateUtils.isSameDay(selectedDay, day)\n            );\n            selectedDays.splice(selectedIndex, 1);\n        } else {\n            selectedDays.push(day);\n        }\n        this.setState({selectedDays});\n    }\n\n    handleChangeName(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        if (this.state.wasSent) return;\n        let dates = [];\n        this.state.selectedDays.forEach((date) => {\n            dates.push(moment(date).format('DD.MM.YYYY'))\n        });\n        VoteDataService.addVote({\n            author: this.state.author,\n            bestDates: dates\n        }, this.state.voteId).then(response => {\n            this.setState({\n                wasSent: true,\n                isVisible: false,\n                errorMsg: \"\"\n            })\n        }).catch(error => {\n                this.setState({\n                    errorMsg: error.response.data\n                })\n            }\n        )\n    }\n\n    render() {\n\n        let {creator, startDate, endDate, isVisible} = this.state;\n\n        return (\n                <div>\n                    <Container>\n                        <Row><a href=\"/\">Назад</a></Row>\n                        <Row>\n                            <h3>Добавить голос. ID голосования {this.state.voteId}.</h3>\n                        </Row>\n\n                        {\n                            this.state.wasSent &&\n                            <div class=\"alert alert-success\">Голос добавлен. ID голосования {this.state.voteId}</div>\n                        }\n\n                        {\n                            this.state.errorMsg &&\n                            <div class=\"alert alert-danger\">{this.state.errorMsg} </div>\n                        }\n\n                        <Row style={isVisible ? {} : { display: 'none' }}>\n                            <Form noValidate onSubmit={this.handleSubmit}>\n\n                                <div>Создатель {creator}</div>\n                                <div>Дата начала {startDate}</div>\n                                <div>Дата окончания {endDate}</div>\n\n                                <Form.Group controlId=\"dates\">\n                                    <Form.Label column>Даты</Form.Label>\n                                    <Col>\n                                        <DayPicker\n                                            selectedDays={this.state.selectedDays}\n                                            onDayClick={this.handleDayClick}\n                                        />\n                                    </Col>\n                                </Form.Group>\n                                <Form.Group controlId=\"name\">\n                                    <Form.Label column>Имя автора</Form.Label>\n                                    <Col>\n                                        <Form.Control type=\"text\" placeholder=\"Имя автора\" length={50}\n                                                      maxLength={200}\n                                                      value={this.state.author} onChange={this.handleChangeName}\n                                                      name=\"author\"/>\n                                    </Col>\n                                </Form.Group>\n                                <Form.Group controlId=\"b\">\n                                    <Col>\n                                        <Button name=\"name\" variant=\"contained\" color=\"primary\"\n                                                onClick={this.handleSubmit}>\n                                            Создать\n                                        </Button>\n                                    </Col>\n                                </Form.Group>\n                            </Form>\n                        </Row>\n                    </Container>\n                </div>\n        );\n    }\n}\n\nexport default AddVote;","import React, {Component} from 'react';\nimport {Col, Form, Row} from \"react-bootstrap\";\nimport {Button} from \"@material-ui/core\";\n\nclass Navigate extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            voteId: \"\"\n        };\n\n        this.handleChangeName = this.handleChangeName.bind(this);\n    }\n\n    handleChangeName(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Form noValidate>\n                    <Row>\n                        <Col>\n\n                            <Button name=\"addvote\" variant=\"contained\" color=\"primary\"\n                                    onClick={() => this.props.history.push(`/createvote`)}>\n                                Создать голосование\n                            </Button>\n                        </Col>\n                    </Row>\n\n                    <Form.Group controlId=\"addvote\">\n                        <Row>\n                            <Col>\n                                <Form.Control type=\"text\" placeholder=\"ID голосования\"\n                                              length={10} maxLength={10}\n                                              value={this.state.voteId} onChange={this.handleChangeName} name=\"voteId\"/>\n                            </Col>\n                            <Col>\n                                <Button name=\"addvote\" variant=\"contained\" color=\"primary\"\n                                        onClick={() => this.props.history.push(`/addvote/${this.state.voteId}`)}>\n                                    Проголосовать\n                                </Button>\n                            </Col>\n                        </Row>\n                    </Form.Group>\n\n                    <Form.Group controlId=\"viewresult\">\n                        <Row>\n                            <Col>\n                                <Form.Control type=\"text\" placeholder=\"ID голосования\"\n                                              length={10} maxLength={10}\n                                              value={this.state.voteId} onChange={this.handleChangeName} name=\"voteId\"/>\n                            </Col>\n                            <Col>\n                                <Button name=\"viewresult\" variant=\"contained\" color=\"primary\"\n                                        onClick={() => this.props.history.push(`/viewresult/${this.state.voteId}`)}>\n                                    Посмотреть результаты\n                                </Button>\n                            </Col>\n                        </Row>\n                    </Form.Group>\n                </Form>\n            </div>\n        );\n    }\n}\n\nexport default Navigate;","import React, {Component} from 'react';\nimport {Container, Row} from 'react-bootstrap';\nimport VoteDataService from '../service/VoteDataService';\n\n\nclass ViewResult extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            voteId: this.props.match.params.voteId,\n            bestDay: \"\",\n            bestDayWithCreator: \"\",\n            bestDayVoters: [],\n            bestDayWithCreatorVoters: []\n\n        };\n\n    }\n\n    componentDidMount() {\n        console.log(\"UI Get votes by id \" + this.state.voteId);\n        if (this.state.voteId.length === 0) {\n            return\n        }\n\n        VoteDataService.getBestDates(this.state.voteId)\n            .then(response => this.setState({\n                bestDay: response.data.bestDay,\n                bestDayWithCreator: response.data.bestDayWithCreator,\n                bestDayVoters: response.data.bestDayVoters,\n                bestDayWithCreatorVoters: response.data.bestDayWithCreatorVoters\n            }))\n    }\n\n    render() {\n\n        let {bestDay, bestDayWithCreator, bestDayVoters, bestDayWithCreatorVoters} = this.state;\n\n        return (\n            <Container>\n                <Row><a href=\"/\">Назад</a></Row>\n                <Row>\n                    <h3>Результаты голосования. ID голосования {this.state.voteId}.</h3>\n                </Row>\n                <Row><h4>Лучшая дата {bestDay}</h4></Row>\n                <Row>Участники: </Row>\n\n                {bestDayVoters.map((voterName, i) => {\n                    return (<Row>{voterName}</Row>)\n                })}\n\n                <Row><h4>Лучшая дата c автором {bestDayWithCreator}</h4></Row>\n                <Row>Участники: </Row>\n\n                {bestDayWithCreatorVoters.map((voterName, i) => {\n                    return (<Row>{voterName}</Row>)\n                })}\n\n            </Container>\n        );\n    }\n}\n\nexport default ViewResult;","import React, {Component} from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport CreateVote from './CreateVote';\nimport AddVote from './AddVote';\nimport Navigate from './Navigate';\nimport ViewResult from './ViewResult';\n\nclass Site extends Component {\n\n    render() {\n        return (\n            <Router>\n                <>\n                <h1>Выбор лучшей даты встречи</h1>\n                <Switch>\n                    <Route path=\"/\" exact component={Navigate}/>\n                    <Route path=\"/createvote\" exact component={CreateVote}/>\n                    <Route path=\"/addvote/:voteId\" exact component={AddVote}/>\n                    <Route path=\"/viewresult/:voteId\" exact component={ViewResult}/>\n                </Switch>\n                </>\n            </Router>\n        );\n    }\n}\n\nexport default Site;","import React, {Component} from 'react';\nimport Site from './component/Site';\n\nclass BmdApp extends Component {\n\n    render() {\n        return (\n            <div className=\"container\">\n                <Site />\n            </div>\n            );\n    }\n}\n\nexport default BmdApp;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport BmdApp from './BmdApp';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<BmdApp />, document.getElementById('root'));\n//ReactDOM.render(<HelloMessage name=\"ИРД\" />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}