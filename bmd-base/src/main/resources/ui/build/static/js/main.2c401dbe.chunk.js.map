{"version":3,"sources":["service/VoteDataService.js","component/CreateVote.jsx","component/AddVote.jsx","component/Navigate.jsx","component/ViewResult.jsx","component/Site.jsx","BmdApp.js","serviceWorker.js","index.js"],"names":["HOST","window","location","origin","toString","VOTE_CREATE_URL","VOTE_ADD_VOTE_URL","VOTE_GET_URL","VOTE_GET_RESULT_URL","data","axios","post","voteId","console","log","get","CreateVote","props","state","startDate","Date","endDate","currentDate","name","descr","selectedDays","errorMsg","handleChange","bind","handleSubmit","handleChangeName","handleDayClick","value","this","setState","event","target","preventDefault","dates","forEach","date","push","moment","format","VoteDataService","createVote","creator","bestDatesForCreator","description","then","response","id","catch","error","day","selected","selectedIndex","findIndex","selectedDay","DateUtils","isSameDay","splice","linkTOAddVote","urlToAddVote","utils","DateFnsUtils","Container","Row","href","class","text","TelegramShareButton","url","quote","className","TelegramIcon","size","round","WhatsappShareButton","WhatsappIcon","EmailShareButton","EmailIcon","Form","noValidate","onSubmit","style","display","Group","controlId","Label","column","Col","DatePicker","onChange","minDate","onDayClick","Control","type","placeholder","length","maxLength","as","rows","Button","variant","color","onClick","Component","AddVote","match","params","author","open_flag","wasSent","isVisible","setOpen","getVote","addVote","bestDates","Navigate","history","ViewResult","bestDay","bestDayWithCreator","bestDayVoters","bestDayWithCreatorVoters","totalVotes","getBestDates","commonProps","width","height","margin","top","right","bottom","left","indexBy","keys","padding","labelTextColor","labelSkipWidth","labelSkipHeight","axisBottom","tickSize","tickPadding","tickRotation","legend","legendPosition","legendOffset","axisLeft","tooltip","index","map","voterName","i","theme","container","background","Site","path","exact","component","year","BmdApp","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2c401dbe.chunk.js","sourcesContent":["import axios from 'axios'\n\nexport const HOST = (typeof window !== 'undefined') ?  window.location.origin.toString() : 'unknown';\nconst VOTE_CREATE_URL = `${HOST}/vote/start`;\nconst VOTE_ADD_VOTE_URL = `${HOST}/vote/add`;\nconst VOTE_GET_URL = `${HOST}/vote/get`;\nconst VOTE_GET_RESULT_URL = `${HOST}/vote/getBestDates`;\n\nclass VoteDataService {\n\n    createVote(data) {\n        return axios.post(`${VOTE_CREATE_URL}`, data);\n    }\n\n    getVote(voteId) {\n        console.log(\"Get votes by id \"  + voteId);\n        return axios.get(`${VOTE_GET_URL}/${voteId}`);\n    }\n\n    addVote(data, voteId) {\n        return axios.post(`${VOTE_ADD_VOTE_URL}/${voteId}`, data);\n    }\n\n    getBestDates(voteId) {\n        return axios.get(`${VOTE_GET_RESULT_URL}/${voteId}`);\n    }\n\n}\nexport default new VoteDataService()\n","import React, {Component} from 'react';\nimport {Button} from '@material-ui/core';\nimport {DatePicker, MuiPickersUtilsProvider} from \"@material-ui/pickers\";\nimport DayPicker, {DateUtils} from 'react-day-picker';\nimport 'react-day-picker/lib/style.css';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {Col, Container, Form, Row} from 'react-bootstrap';\nimport VoteDataService, {HOST} from '../service/VoteDataService';\nimport moment from 'moment';\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport {\n  FacebookIcon,\n  LinkedinIcon,\n  TelegramIcon,\n  WhatsappIcon,\n  EmailIcon,\n  FacebookShareButton,\n  LinkedinShareButton,\n  TelegramShareButton,\n  WhatsappShareButton,\n  EmailShareButton\n} from 'react-share';\n\nclass CreateVote extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            startDate: new Date(),\n            endDate: new Date(),\n            currentDate: new Date(),\n            name: \"\",\n            descr: \"\",\n            voteId: \"\",\n            selectedDays: [],\n            errorMsg: \"\"\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChangeName = this.handleChangeName.bind(this);\n        this.handleDayClick = this.handleDayClick.bind(this);\n    }\n\n    handleChange(value, name) {\n        this.setState({\n            [name]: value\n        });\n    }\n\n    handleChangeName(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        let dates = [];\n        this.state.selectedDays.forEach((date) => {\n            dates.push(moment(date).format('DD.MM.YYYY'))\n        });\n\n        VoteDataService.createVote({\n            startDate: moment(this.state.startDate).format('DD.MM.YYYY'),\n            endDate: moment(this.state.endDate).format('DD.MM.YYYY'),\n            creator: this.state.name,\n            bestDatesForCreator: dates,\n            description: this.state.descr\n        }).then(response => {\n            this.setState({\n                startDate: new Date(),\n                endDate: new Date(),\n                currentDate: new Date(),\n                name: \"\",\n                descr: \"\",\n                voteId: response.data.id,\n                errorMsg: \"\"})\n        }).catch(error => {\n               this.setState({\n                  errorMsg: error.response.data\n               })\n            }\n        )\n\n    }\n\n    handleDayClick(day, {selected}) {\n        const {selectedDays} = this.state;\n        if (selected) {\n            const selectedIndex = selectedDays.findIndex(selectedDay =>\n                DateUtils.isSameDay(selectedDay, day)\n            );\n            selectedDays.splice(selectedIndex, 1);\n        } else {\n            selectedDays.push(day);\n        }\n        this.setState({selectedDays});\n    }\n\n    render() {\n\n        let linkTOAddVote = `/addvote/${this.state.voteId}`;\n        let urlToAddVote = HOST + linkTOAddVote;\n\n        return (\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <Container>\n                    <Row><a href=\"/\">Назад</a></Row>\n                    <br/>\n                    <Row>\n                        <h3>Создать опрос выбора лучшей даты</h3>\n                    </Row>\n                    {\n                        this.state.voteId &&\n                        <div class=\"alert alert-success\">\n                            <p>Создано голосование {this.state.voteId}. </p>\n                            <br/>\n                            <p>\n                               Скопируйте ID голосования и введите его на <a href=\"/\">странице</a>&nbsp;\n                               для добавления голоса или просмотра результатов.\n                               Для удобства вы можете скопировать прямую ссылку для голосования и отправить ее всем участникам.\n                            </p>\n\n                            <p>\n                            <CopyToClipboard text={this.state.voteId}>\n                                <button>Скопировать ID</button>\n                            </CopyToClipboard>\n                            &nbsp;\n                            <CopyToClipboard text={urlToAddVote}>\n                                <button>Скопировать ссылку на голосование</button>\n                            </CopyToClipboard>\n                            </p>\n                            <p>\n                            <TelegramShareButton\n                                        url={urlToAddVote}\n                                        quote=\"Проголосовать\"\n                                        className=\"AddVote\"\n                                      >\n                                <TelegramIcon size={32} round />\n                            </TelegramShareButton>\n                            &nbsp;\n                            <WhatsappShareButton\n                                        url={urlToAddVote}\n                                        quote=\"Проголосовать\"\n                                        className=\"AddVote\"\n                                      >\n                                <WhatsappIcon size={32} round />\n                            </WhatsappShareButton>\n                            &nbsp;\n                            <EmailShareButton\n                                        url={urlToAddVote}\n                                        quote=\"Проголосовать\"\n                                        className=\"AddVote\"\n                                      >\n                                <EmailIcon size={32} round />\n                            </EmailShareButton>\n                            </p>\n                        </div>\n                    }\n                    {\n                        this.state.errorMsg &&\n                        <div class=\"alert alert-danger\">{this.state.errorMsg} </div>\n                    }\n                    <Row>\n                        <Form noValidate onSubmit={this.handleSubmit} style={!this.state.voteId ? {} : { display: 'none' }}>\n\n                            <Form.Row>\n\n                                <Form.Group controlId=\"startd\">\n                                    <Form.Label column>Дата начала</Form.Label>\n                                    <Col>\n                                        <DatePicker\n                                            value={this.state.startDate}\n                                            onChange={date => this.handleChange(date, \"startDate\")}\n                                            minDate={this.state.currentDate}\n                                            format=\"dd.MM.yyyy\"\n                                            name=\"startDate\"\n                                        />\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group controlId=\"enddd\">\n                                    <Form.Label column>Дата окончания</Form.Label>\n                                    <Col>\n                                        <DatePicker\n                                            value={this.state.endDate}\n                                            onChange={date => this.handleChange(date, \"endDate\")}\n                                            minDate={this.state.currentDate}\n                                            format=\"dd.MM.yyyy\"\n                                            name=\"endDate\"\n                                        />\n                                    </Col>\n                                </Form.Group>\n                            </Form.Row>\n\n                            <Form.Row>\n                                <Form.Group controlId=\"dates\">\n                                    <Form.Label column>Даты</Form.Label>\n                                    <Col>\n                                        <DayPicker\n                                            selectedDays={this.state.selectedDays}\n                                            onDayClick={this.handleDayClick}\n                                        />\n                                    </Col>\n                                </Form.Group>\n                            </Form.Row>\n\n                            <Form.Row>\n                                <Form.Group controlId=\"name\">\n                                    <Form.Label column>Имя автора</Form.Label>\n                                    <Col>\n                                        <Form.Control type=\"text\" placeholder=\"Имя автора\" length={50} maxLength={200}\n                                                      value={this.state.name} onChange={this.handleChangeName} name=\"name\" />\n                                    </Col>\n                                </Form.Group>\n                            </Form.Row>\n\n                            <Form.Row>\n                                <Form.Group controlId=\"descr\">\n                                    <Form.Label column>Цель встречи</Form.Label>\n                                    <Col>\n                                        <Form.Control as=\"textarea\" rows=\"3\" maxLength={200}\n                                                      value={this.state.descr} onChange={this.handleChangeName} name=\"descr\" />\n                                    </Col>\n                                </Form.Group>\n                            </Form.Row>\n\n                            <Form.Row>\n                                <Form.Group controlId=\"b\">\n                                    <Col>\n                                        <Button name=\"name\" variant=\"contained\" color=\"primary\" onClick={this.handleSubmit}>\n                                            Создать\n                                        </Button>\n                                    </Col>\n                                </Form.Group>\n                            </Form.Row>\n\n                        </Form>\n                    </Row>\n\n                    {\n                        this.state.errorMsg &&\n                        <div class=\"alert alert-danger\">{this.state.errorMsg} </div>\n                    }\n\n                </Container>\n            </MuiPickersUtilsProvider>\n        );\n    }\n}\n\nexport default CreateVote;","import React, {Component} from 'react';\nimport DayPicker, {DateUtils} from 'react-day-picker';\nimport 'react-day-picker/lib/style.css';\nimport {Col, Container, Form, Row} from 'react-bootstrap';\nimport VoteDataService from '../service/VoteDataService';\nimport {Button} from \"@material-ui/core\";\nimport moment from 'moment';\n\nclass AddVote extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            voteId: this.props.match.params.voteId,\n            startDate: \"\",\n            endDate: \"\",\n            creator: \"\",\n            author: \"\",\n            descr: \"\",\n            open_flag: false,\n            selectedDays: [],\n            wasSent: false,\n            isVisible: true,\n            errorMsg: \"\"\n        };\n\n        this.setOpen = this.setOpen.bind(this);\n        this.handleDayClick = this.handleDayClick.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChangeName = this.handleChangeName.bind(this);\n    }\n\n    componentDidMount() {\n        console.log(\"UI Get votes by id \" + this.state.voteId);\n        if (this.state.voteId.length === 0) {\n            return\n        }\n\n        VoteDataService.getVote(this.state.voteId)\n            .then(response => this.setState({\n                startDate: response.data.startDate,\n                endDate: response.data.endDate,\n                creator: response.data.creator,\n                descr: response.data.description\n            })).catch(error => {\n                      this.setState({\n                          isVisible: false\n                      })\n                })\n    }\n\n    setOpen() {\n        this.state.open_flag = !this.state.open_flag;\n    }\n\n    handleDayClick(day, {selected}) {\n        const {selectedDays} = this.state;\n        if (selected) {\n            const selectedIndex = selectedDays.findIndex(selectedDay =>\n                DateUtils.isSameDay(selectedDay, day)\n            );\n            selectedDays.splice(selectedIndex, 1);\n        } else {\n            selectedDays.push(day);\n        }\n        this.setState({selectedDays});\n    }\n\n    handleChangeName(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        if (this.state.wasSent) return;\n        let dates = [];\n        this.state.selectedDays.forEach((date) => {\n            dates.push(moment(date).format('DD.MM.YYYY'))\n        });\n        VoteDataService.addVote({\n            author: this.state.author,\n            bestDates: dates\n        }, this.state.voteId).then(response => {\n            this.setState({\n                wasSent: true,\n                isVisible: false,\n                errorMsg: \"\"\n            })\n        }).catch(error => {\n            this.setState({\n                errorMsg: error.response.data\n            })\n        }\n        )\n    }\n\n    render() {\n\n        let {creator, startDate, endDate, isVisible, descr} = this.state;\n\n        return (\n                <div>\n                    <Container>\n                        <Row><a href=\"/\">Назад</a></Row>\n                        <br/>\n                        <Row>\n                            <h3>Добавить голос</h3>\n                        </Row>\n\n                        {\n                            this.state.wasSent &&\n                            <div class=\"alert alert-success\">Голос добавлен. ID голосования {this.state.voteId}</div>\n                        }\n\n                        {\n                            this.state.errorMsg &&\n                            <div class=\"alert alert-danger\">{this.state.errorMsg} </div>\n                        }\n\n                        <Row style={isVisible ? {} : { display: 'none' }}>\n                            <Form noValidate onSubmit={this.handleSubmit}>\n\n                                <div><strong>Организатор {creator}</strong></div>\n                                <div>Дата начала {startDate}</div>\n                                <div>Дата окончания {endDate}</div>\n                                <div>Цель встречи: {descr}</div>\n\n                                <Form.Group controlId=\"dates\">\n                                    <Form.Label column>Выберите даты в диапазоне от {startDate} до {endDate}</Form.Label>\n                                    <Col>\n                                        <DayPicker\n                                            selectedDays={this.state.selectedDays}\n                                            onDayClick={this.handleDayClick}\n                                        />\n                                    </Col>\n                                </Form.Group>\n                                <Form.Group controlId=\"name\">\n                                    <Form.Label column>Имя автора</Form.Label>\n                                    <Col>\n                                        <Form.Control type=\"text\" placeholder=\"Имя автора\" length={50}\n                                                      maxLength={200}\n                                                      value={this.state.author} onChange={this.handleChangeName}\n                                                      name=\"author\"/>\n                                    </Col>\n                                </Form.Group>\n                                <Form.Group controlId=\"b\">\n                                    <Col>\n                                        <Button name=\"name\" variant=\"contained\" color=\"primary\"\n                                                onClick={this.handleSubmit}>\n                                            Создать\n                                        </Button>\n                                    </Col>\n                                </Form.Group>\n                            </Form>\n                        </Row>\n\n                        {\n                            this.state.errorMsg &&\n                            <div class=\"alert alert-danger\">{this.state.errorMsg} </div>\n                        }\n\n                    </Container>\n                </div>\n        );\n    }\n}\n\nexport default AddVote;","import React, {Component} from 'react';\nimport {Col, Form, Row} from \"react-bootstrap\";\nimport {Button} from \"@material-ui/core\";\n\nclass Navigate extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            voteId: \"\"\n        };\n\n        this.handleChangeName = this.handleChangeName.bind(this);\n    }\n\n    handleChangeName(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Form noValidate>\n                    <Form.Group controlId=\"createvote\">\n                        <Row>\n                        <Col>\n                           <p>Сервис выбора лучшей даты встречи подбирает 2 ближайшие\n                           даты с максимальным количеством участников.\n                           </p>\n                           <p>\n                           Первая дата подбирается без учета пожеланий организатора, а вторая - дата, походящая организатору.\n                           После создания голосования сохраните ID и используйте его для добавления голоса и просмотра результатов.\n                           </p>\n                        </Col>\n                        </Row>\n                    </Form.Group>\n\n                    <Form.Group controlId=\"createvote\">\n                        <Row>\n                            <Col>\n                                <Button name=\"addvote\" variant=\"contained\" color=\"primary\"\n                                        onClick={() => this.props.history.push(`/createvote`)}>\n                                    Создать голосование\n                                </Button>\n                            </Col>\n                        </Row>\n                    </Form.Group>\n\n                    <Form.Group controlId=\"addvote\">\n                        <Row>\n                            <Col>\n                                <Form.Control type=\"text\" placeholder=\"ID голосования\"\n                                              length={40} maxLength={40}\n                                              value={this.state.voteId} onChange={this.handleChangeName} name=\"voteId\"/>\n                            </Col>\n                            <Col>\n                                <Button name=\"addvote\" variant=\"contained\" color=\"primary\"\n                                        onClick={() => this.props.history.push(`/addvote/${this.state.voteId}`)}>\n                                    Проголосовать\n                                </Button>\n                            </Col>\n                        </Row>\n                    </Form.Group>\n\n                    <Form.Group controlId=\"viewresult\">\n                        <Row>\n                            <Col>\n                                <Form.Control type=\"text\" placeholder=\"ID голосования\"\n                                              length={40} maxLength={40}\n                                              value={this.state.voteId} onChange={this.handleChangeName} name=\"voteId\"/>\n                            </Col>\n                            <Col>\n                                <Button name=\"viewresult\" variant=\"contained\" color=\"primary\"\n                                        onClick={() => this.props.history.push(`/viewresult/${this.state.voteId}`)}>\n                                    Посмотреть результаты\n                                </Button>\n                            </Col>\n                        </Row>\n                    </Form.Group>\n                </Form>\n            </div>\n        );\n    }\n}\n\nexport default Navigate;","import React, {Component} from 'react';\nimport {Container, Row} from 'react-bootstrap';\nimport VoteDataService from '../service/VoteDataService';\nimport { Bar } from '@nivo/bar'\n\nclass ViewResult extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            voteId: this.props.match.params.voteId,\n            bestDay: \"\",\n            bestDayWithCreator: \"\",\n            bestDayVoters: [],\n            bestDayWithCreatorVoters: [],\n            totalVotes: 0,\n            creator: \"\",\n            description: \"\",\n            isVisible: true\n        };\n\n    }\n\n    componentDidMount() {\n        console.log(\"UI Get votes by id \" + this.state.voteId);\n        if (this.state.voteId.length === 0) {\n            return;\n        }\n\n        VoteDataService.getBestDates(this.state.voteId)\n            .then(response => this.setState({\n                bestDay: response.data.bestDay,\n                bestDayWithCreator: response.data.bestDayWithCreator,\n                bestDayVoters: response.data.bestDayVoters,\n                bestDayWithCreatorVoters: response.data.bestDayWithCreatorVoters,\n                totalVotes: response.data.totalVotes,\n                creator: response.data.creator,\n                descr: response.data.description\n            })).catch(error => {\n               this.setState({\n                   bestDay: \"\",\n                   bestDayWithCreator: \"\",\n                   bestDayVoters: \"\",\n                   bestDayWithCreatorVoters: \"\",\n                   totalVotes: \"\",\n                   creator: \"\",\n                   descr: \"\",\n                   isVisible: false\n               })\n           });\n    }\n\n    render() {\n\n        let {bestDay, bestDayWithCreator, bestDayVoters, bestDayWithCreatorVoters, totalVotes, creator, descr, isVisible} = this.state;\n        bestDayWithCreator = bestDayWithCreator === null ? \"\" : bestDayWithCreator;\n        const keys = ['value'];\n        const commonProps = {\n            width: 380,\n            height: 250,\n            margin: { top: 30, right: 50, bottom: 50, left: 45 },\n            data: [\n                   {'date': bestDay, 'value': bestDayVoters.length},\n                   {'date': bestDayWithCreator + ' (с организатором)', 'value': bestDayWithCreatorVoters.length}],\n            indexBy: 'date',\n            keys,\n            padding: 0.2,\n            labelTextColor: 'inherit:darker(1.4)',\n            labelSkipWidth: 5,\n            labelSkipHeight: 5,\n            axisBottom: {tickSize: 6, tickPadding: 5, tickRotation: 0, legend: 'Даты', legendPosition: 'middle', legendOffset: 40 },\n            axisLeft: {tickSize: 6, tickPadding: 5, tickRotation: 0, legend: 'Количество голосов', legendPosition: 'middle', legendOffset: -40 }\n        }\n\n        return (\n            <Container>\n                <Row><a href=\"/\">Назад</a></Row>\n                <br/>\n                <Row>\n                    <h3>Результаты голосования</h3>\n                </Row>\n                <Row>\n                    <h5>Организатор: {creator}</h5>\n                </Row>\n\n                <Row>Всего проголосовало: {totalVotes} </Row>\n\n                <Row>Цель встречи: {descr} </Row>\n\n                <Row>Для просмотра списка участников нажмите/наведите мышкой на столбец</Row>\n\n                <Row style={isVisible ? {} : { display: 'none' }}>\n                <Bar\n                        {...commonProps}\n                        tooltip={({ id, value, color, index }) => (\n                            <strong style={{ color }}>\n                                { index === 0 ?\n                                   bestDayVoters.map((voterName, i) => {\n                                                       return (<p>{voterName}</p>)\n                                                   })\n                                   :\n                                   bestDayWithCreatorVoters.map((voterName, i) => {\n                                                       return (<p>{voterName}</p>)\n                                                   })\n\n                                }\n                            </strong>\n                        )}\n                        theme={{ tooltip: { container: { background: '#444', }, }, }}\n                    />\n                    </Row>\n\n            </Container>\n        );\n    }\n}\n\nexport default ViewResult;","import React, {Component} from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport CreateVote from './CreateVote';\nimport AddVote from './AddVote';\nimport Navigate from './Navigate';\nimport ViewResult from './ViewResult';\nimport moment from 'moment';\n\nclass Site extends Component {\n\n    render() {\n        return (\n            <Router>\n                <>\n                <h1>Выбор лучшей даты встречи</h1>\n                <br/>\n                <Switch>\n                    <Route path=\"/\" exact component={Navigate}/>\n                    <Route path=\"/createvote\" exact component={CreateVote}/>\n                    <Route path=\"/addvote/:voteId\" exact component={AddVote}/>\n                    <Route path=\"/viewresult/:voteId\" exact component={ViewResult}/>\n                </Switch>\n                <br/>\n                <br/>\n                <p>\n                    <a href=\"https://yasobe.ru/na/asv_app_dev\">Поддержать проект</a>\n                    &copy; {moment().year()} mailto:asv_app_dev@yandex.ru <small>v1.0.3</small></p>\n                </>\n            </Router>\n        );\n    }\n}\n\nexport default Site;","import React, {Component} from 'react';\nimport Site from './component/Site';\n\nclass BmdApp extends Component {\n\n    render() {\n        return (\n            <div className=\"container\">\n                <Site />\n            </div>\n            );\n    }\n}\n\nexport default BmdApp;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport BmdApp from './BmdApp';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<BmdApp />, document.getElementById('root'));\n//ReactDOM.render(<HelloMessage name=\"ИРД\" />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}